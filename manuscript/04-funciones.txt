#Funciones

## Ámbito (Scope) de las Funciones

En javascript las variables se definen en el ámbito de una función (y no en el ámbito de un bloque como ocurre en otros lenguajes)  

- Las **variables globales** son aquellas que se definen fuera de cualquier función
- Las **variables locales** son aquellas que se definen dentro de una función


##Funciones Callback

_Las funciones en Javascript son datos_, lo que significa que podemos asignarlas a variables igual que cualquier otro valor (y manejarlas como variables)

```javascript
function f(){ return 1; }
var f = function(){ return 1; }
```

Las funciones son datos, pero un tipo especial de datos (`typeof ‘function’`) ya
que:

- Contienen código
- Podemos ejecutarlas

```javascript
>>> var sum = function(a, b) { return a + b; }
>>> var add = sum;
>>> delete sum
true
>>> typeof sum;
"undefined"
>>> typeof add;
"function"
>>> add(1, 2);
3
```

Las **funciones anónimas** son aquellas que no tienen nombre y se pueden utilizar para:

- Pasar esa función como argumento de una función
- Definir una función y ejecutarla inmediatamente

```javascript
>>> function(a){ return a; }
```

Cuando pasamos una función A como argumento de otra función B y B ejecuta A, decimos que A es una **[función callback](http://stackoverflow.com/questions/483073/getting-a-better-understanding-of-callback-functions-in-javascript)**

```javascript
>>> function invoke_and_add(a, b){ return a() + b(); }
>>> function one() { return 1; }
>>> function two() { return 2; }
>>> invoke_and_add(one, two);
3
>>> invoke_and_add(one, function(){return 7;})
8
```

##Closures

Si definimos una función `n()` dentro de `f()` , `n()` tendrá acceso tanto a las variables de su [scope](http://www.digital-web.com/articles/scope_in_javascript/) ([ámbito](http://www.smashingmagazine.com/2009/08/01/what-you-need-to-know-about-javascript-scope/)) como las del scope de su padre. Esto es lo que se llama **[scope chain](http://stackoverflow.com/questions/1484143/scope-chain-in-javascript)** (encadenamiento de ámbitos)

```javascript
var a = 1;
function f(){
  var b = 1;
  function n() {
    var c = 3;
  }
}
```

Las funciones tienen lo que se llama **[lexical scope](http://stackoverflow.com/questions/1047454/what-is-lexical-scope)** ([ámbito léxico](http://ayende.com/blog/3042/javascript-lexical-scopes-and-what-your-momma-thought-you-about-variables)) lo que significa que crean su entorno (scope, a qué variables tienen acceso) cuando son definidas no cuando son ejecutadas

```javascript
>>> function f1(){ var a = 1; return f2(); }
>>> function f2(){ return a; }
>>> f1();
a is not defined
>>> var a = 5;
>>> f1();
5
>>> a = 55;
>>> f1();
55
>>> delete a;
true
>>> f1();
a is not defined
```

```javascript
var a = 123;
function f() {
  alert(a);
  var a = 1;
  alert(a);
}
f();
```

Un **[closure](https://developer.mozilla.org/en/JavaScript/Guide/Closures)** se crea cuando una funcion mantiene un enlace con el ámbito (scope) de la función padre incluso después de que la función padre haya terminado.

```javascript
function f(){
  var b = "b";
  return function(){
    return b;
  }
}
>>> b
b is not defined
>>> var n = f();
>>> n();
"b"
```

```javascript
var n;
function f(){
  var b = "b";
  n = function(){
    return b;
  }
}
>>> f();
>>> n();
```

```javascript
function f(arg) {
  var n = function(){
    return arg;
  };
  arg++;
  return n;
};
>>> var m = f(123);
>>> m();
```

A> → [Closures and lexical scoping | Mark Story](http://mark-story.com/posts/view/picking-up-javascript-closures-and-lexical-scoping)   
A> → [How do JavaScript closures work? | StackOverflow](http://stackoverflow.com/questions/111102/how-do-javascript-closures-work)   
A> → [Secrets of JavaScript: closures | kryogenix.org](http://www.kryogenix.org/code/browser/secrets-of-javascript-closures/)   
A> → [Closing The Book On Javascript Closures | hunlock.com](http://www.hunlock.com/blogs/Closing_The_Book_On_Javascript_Closures)   
A> → [A Graphical Explanation Of Javascript Closures In A jQuery Context | Ben Nadel](http://www.bennadel.com/blog/1482-a-graphical-explanation-of-javascript-closures-in-a-jquery-context.htm)   
